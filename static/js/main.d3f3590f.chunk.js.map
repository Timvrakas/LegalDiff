{"version":3,"sources":["Document.js","DocViewer.js","App.js","serviceWorker.js","index.js"],"names":["Document","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","url","self","fetch","then","response","text","marked","sanitize","doc","setState","__html","react_default","a","createElement","class","dangerouslySetInnerHTML","React","Component","DocViewer","changeDoc","bind","assertThisInitialized","_child","createRef","docs","repo","GitHub","username","token","getRepo","list","getContents","info","Promise","element","path","download_url","reduce","total","concat","all","current","updateMarkdown","newDoc","className","react_select_browser_esm","options","getOptionLabel","name","onChange","src_Document_0","ref","App","src_DocViewer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iSA+BeA,qBA1BX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,KAAM,MAHKR,8EAOJS,GACX,IAAIC,EAAOP,KACXQ,MAAMF,GACDG,KAAK,SAAUC,GACZ,OAAOA,EAASC,SAEnBF,KAAK,SAAUE,GACZ,OAAOC,IAAOD,EAAM,CAAEE,UAAU,MACjCJ,KAAK,SAAUK,GACdP,EAAKQ,SAAS,CAAEV,KAAM,CAAEW,OAAQF,wCAKxC,OAAOG,EAAAC,EAAAC,cAAA,OAAKC,MAAM,MAAMC,wBAAyBrB,KAAKI,MAAMC,cAtB7CiB,IAAMC,qCC4DdC,cAzDX,SAAAA,EAAY5B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwB,IACf3B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0B,GAAArB,KAAAH,KAAMJ,KACD6B,UAAY5B,EAAK4B,UAAUC,KAAf5B,OAAA6B,EAAA,EAAA7B,CAAAD,IACjBA,EAAK+B,OAASN,IAAMO,YACpBhC,EAAKO,MAAQ,CACT0B,KAAM,MALKjC,mFAUf,IAAIU,EAAOP,KAEP+B,EADO,IAAIC,IAAO,CAAEC,SAAU,YAAaC,MAAO,6CACxCC,QAAQ,YAAa,kBAE/BC,EAAOL,EAAKM,YAAY,SAAU,YAAa,SAC9C5B,KAAK,SAAU6B,GAEZ,OADA/B,EAAKQ,SAAS,CAAEe,KAAMQ,EAAKjC,KAAKyB,OACzBQ,EAAKjC,KAAKyB,OAGZS,MAAYH,EAAM,SAAUI,GACrC,OAAOT,EAAKM,YAAY,SAAUG,EAAQC,MAAM,GAC3ChC,KAAK,SAAU6B,GAGZ,OAFAE,EAAO,IAAUF,EAAKjC,KAAKqC,aAEpBF,MAIZG,OAAO,SAAUC,EAAO9B,GAC3B,OAAO8B,EAAMC,OAAO/B,IACrB,IAAIL,KAAK,SAAUqC,GAClBvC,EAAKQ,SAAS,CAAEe,KAAMgB,IACtBvC,EAAKqB,OAAOmB,QAAQC,eAAeF,EAAI,GAAGxC,yCAIxC2C,GACNjD,KAAK4B,OAAOmB,QAAQC,eAAeC,EAAO3C,sCAI1C,OACIW,EAAAC,EAAAC,cAAA,UAAQ+B,UAAU,aACdjC,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,OACXjC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CACAC,QAASpD,KAAKI,MAAM0B,KACpBuB,eAAgB,SAAUvC,GAAO,OAAOA,EAAIwC,MAC5CC,SAAUvD,KAAKyB,aAGnBR,EAAAC,EAAAC,cAACqC,EAAD,CAAUC,IAAKzD,KAAK4B,iBApDZN,IAAMC,WCMfmC,MARf,WACE,OACEzC,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,OACbjC,EAAAC,EAAAC,cAACwC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/D,KAAK,SAAAgE,GACjCA,EAAaC","file":"static/js/main.d3f3590f.chunk.js","sourcesContent":["import React from 'react';\nimport marked from 'marked';\nimport './Document.css';\n\nclass Document extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            data: null\n        };\n    }\n\n    updateMarkdown(url) {\n        var self = this;\n        fetch(url)\n            .then(function (response) {\n                return response.text();\n            })\n            .then(function (text) {\n                return marked(text, { sanitize: true });\n            }).then(function (doc) {\n                self.setState({ data: { __html: doc } });\n            });\n    }\n\n    render() {\n        return <div class=\"doc\" dangerouslySetInnerHTML={this.state.data} />\n    }\n\n}\n\nexport default Document;","import React from 'react';\nimport Select from 'react-select'\nimport Document from './Document'\nimport GitHub from 'github-api';\nimport * as Promise from \"bluebird\";\n\nclass DocViewer extends React.Component {\n    constructor(props) {\n        super(props)\n        this.changeDoc = this.changeDoc.bind(this)\n        this._child = React.createRef();\n        this.state = {\n            docs: null\n        };\n    }\n\n    componentDidMount() {\n        var self = this;\n        const gh = new GitHub({ username: 'TIMVRAKAS', token: '496052d84361126df057edb22030a0d2c227b6c5' });\n        let repo = gh.getRepo('Timvrakas', 'ASSU-LegalDiff');\n\n        var list = repo.getContents('master', 'info.json', 'false')\n            .then(function (info) {\n                self.setState({ docs: info.data.docs });\n                return info.data.docs;\n            });\n\n        var result = Promise.map(list, function (element) {\n            return repo.getContents('master', element.path, false)\n                .then(function (info) {\n                    element['url'] = info.data.download_url;\n\n                    return element;\n                });\n        });\n\n        result.reduce(function (total, doc) {\n            return total.concat(doc);\n        }, []).then(function (all) {\n            self.setState({ docs: all });\n            self._child.current.updateMarkdown(all[0].url);\n        })\n    }\n\n    changeDoc(newDoc) {\n        this._child.current.updateMarkdown(newDoc.url);\n    }\n\n    render() {\n        return (\n            <header className=\"DocViewer\">\n                <div className=\"row\">\n                    <Select\n                    options={this.state.docs}\n                    getOptionLabel={function (doc) { return doc.name }}\n                    onChange={this.changeDoc}\n                    />\n                </div>\n                <Document ref={this._child} />\n            </header>\n        );\n    }\n}\n\nexport default DocViewer;","import React from 'react';\nimport DocViewer from './DocViewer'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DocViewer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}