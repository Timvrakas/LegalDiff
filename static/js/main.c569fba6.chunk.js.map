{"version":3,"sources":["Document.js","DocSelector.js","DocViewer.js","DiffDocument.js","DiffViewer.js","App.js","serviceWorker.js","index.js"],"names":["Document","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","url","self","fetch","then","response","text","doc","setState","__html","react_default","a","createElement","className","dangerouslySetInnerHTML","React","Component","DocSelector","changeDoc","bind","assertThisInitialized","changeBranch","branches","docs","branch","repo","listBranches","info","getContents","name","path","onURL","download_url","newDoc","updateURL","newBranch","react_select_browser_esm","options","getOptionLabel","onChange","DocViewer","_doc","createRef","newURL","current","updateMarkdown","src_DocSelector_0","src_Document_0","ref","DiffDocument","urls","Promise","marked","sanitize","pages","diff","HtmlDiff","execute","DiffViewer","onChangeBase","onChangeDiff","_diff","newBaseURL","updateDiff","newDiffURL","src_DiffDocument","App","GitHub","username","token","getRepo","id","esm","src_DocViewer","src_DiffViewer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c569fba6.chunk.js","sourcesContent":["import React from 'react';\nimport marked from 'marked';\nimport './Document.css';\n\nclass Document extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            data: null\n        };\n    }\n\n    updateMarkdown(url) {\n        var self = this;\n        fetch(url)\n            .then(function (response) {\n                return response.text();\n            //})\n            //.then(function (text) {\n            //    return marked(text, { sanitize: true });\n            }).then(function (doc) {\n                self.setState({ data: { __html: doc } });\n            });\n    }\n\n    render() {\n        return <div className=\"md-doc\" dangerouslySetInnerHTML={this.state.data} />\n    }\n\n}\n\nexport default Document;","import React from 'react';\nimport Select from 'react-select'\nimport './DocSelector.css';\n\n/*\nDocSelector: Provides a teired selector interface and generates a URL based on a refspec and a file\n*/\n\nclass DocSelector extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.changeDoc = this.changeDoc.bind(this)\n        this.changeBranch = this.changeBranch.bind(this)\n\n        this.state = {\n            branches: [],\n            docs: []\n        };\n\n        this.doc = null;\n        this.branch = 'master';\n    }\n\n    componentDidMount() {\n        var self = this;\n\n        this.props.repo.listBranches()\n            .then(function (info) {\n                self.setState({ branches: info.data });\n            });\n    }\n\n    updateURL() {\n        var self = this;\n\n        if (this.branch && this.doc) {\n            this.props.repo.getContents(this.branch.name, this.doc.path, false)\n                .then(function (info) {\n                    self.props.onURL(info.data.download_url);\n                });\n        }\n    }\n\n    changeDoc(newDoc) {\n        this.doc = newDoc;\n        this.updateURL();\n    }\n\n    changeBranch(newBranch) {\n        var self = this;\n\n        this.branch = newBranch;\n        this.props.repo.getContents(this.branch.name, 'info.json', 'false')\n            .then(function (info) {\n                self.setState({ docs: info.data.docs }, self.updateURL);\n            });\n    }\n\n    render() {\n        return (\n            <div className=\"doc-selector\">\n                <div className=\"refspec\">\n                    Branch:\n                    <Select\n                        options={this.state.branches}\n                        getOptionLabel={function (branch) { return branch.name }}\n                        onChange={this.changeBranch}\n                    />\n                </div>\n                <div className=\"document\">\n                    Document:\n                    <Select\n                        options={this.state.docs}\n                        getOptionLabel={function (doc) { return doc.name }}\n                        onChange={this.changeDoc}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DocSelector;","import React from 'react';\nimport Document from './Document'\nimport DocSelector from './DocSelector';\n\nclass DocViewer extends React.Component {\n    constructor(props) {\n        super(props)\n        this.onURL = this.onURL.bind(this)\n        this._doc = React.createRef();\n\n    }\n\n    onURL(newURL) {\n        this._doc.current.updateMarkdown(newURL);\n    }\n\n    render() {\n        return (\n            <div className=\"DocViewer\">\n                <DocSelector repo={this.props.repo} onURL={this.onURL} />\n                <Document ref={this._doc} />\n            </div>\n        );\n    }\n}\n\nexport default DocViewer;","import React from 'react';\nimport marked from 'marked';\nimport HtmlDiff from 'htmldiff-js';\nimport * as Promise from \"bluebird\";\nimport './Document.css';\n\nclass DiffDocument extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            data: null\n        };\n    }\n\n    componentDidMount(){\n        this.updateMarkdown(this.props.urls);\n    }\n\n    updateMarkdown(urls) {\n        var self = this;\n        Promise.map(urls, function (url) {\n            return fetch(url)\n                .then(function (response) {\n                    return response.text();\n                })\n                .then(function (text) {\n                    return marked(text, { sanitize: true });\n                });\n        }).then(function (pages) {\n            var diff = HtmlDiff.execute(pages[0],pages[1]);\n            self.setState({ data: { __html: diff } });\n        });\n    }\n\n    render() {\n        return <div className=\"md-doc\" dangerouslySetInnerHTML={this.state.data} />\n    }\n\n}\n\nexport default DiffDocument;","import React from 'react';\nimport DiffDocument from './DiffDocument'\nimport DocSelector from './DocSelector';\n\nclass DiffViewer extends React.Component {\n    constructor(props) {\n        super(props)\n        this.onChangeBase = this.onChangeBase.bind(this)\n        this.onChangeDiff = this.onChangeDiff.bind(this)\n        this._diff = React.createRef();\n\n        this.urls = [null,null];\n    }\n\n    onChangeBase(newBaseURL) {\n        this.urls[0] = newBaseURL;\n        this.updateDiff();\n    }\n\n    onChangeDiff(newDiffURL) {\n        this.urls[1] = newDiffURL;\n        this.updateDiff();\n    }\n\n    updateDiff(){\n        if(this.urls[0] && this.urls[1]){\n            this._diff.current.updateMarkdown(this.urls);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"DiffViewer\">\n                Document 1:\n                <DocSelector repo={this.props.repo} onURL={this.onChangeBase} />\n                Document 2:\n                <DocSelector repo={this.props.repo} onURL={this.onChangeDiff} />\n                <DiffDocument ref={this._diff} />\n            </div>\n        );\n    }\n}\n\nexport default DiffViewer;","import React from 'react';\nimport DocViewer from './DocViewer'\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport \"react-tabs/style/react-tabs.css\";\nimport GitHub from 'github-api';\nimport DiffViewer from './DiffViewer';\n\nfunction App() {\n  const gh = new GitHub({ username: 'TIMVRAKAS', token: '496052d84361126df057edb22030a0d2c227b6c5' });\n  let repo = gh.getRepo('stanford-assu', 'Governing-Docs');\n\n  return (\n    <div id=\"page-container\">\n      <div id=\"content-wrap\">\n      <div id=\"header\">\n          <h1>LegalDiff</h1>\n          <h2>A Structured Document Tracking Tool</h2>\n      </div>\n        <Tabs>\n          <TabList>\n            <Tab>View Documents</Tab>\n            <Tab>Compare Versions</Tab>\n          </TabList>\n\n          <TabPanel>\n            <DocViewer repo={repo} />\n          </TabPanel>\n          <TabPanel>\n            <DiffViewer repo={repo} />\n          </TabPanel>\n        </Tabs>\n      </div>\n      <footer id=\"footer\">\n        <div className=\"byline\">LegalDiff by Tim Vrakas, 2019</div>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}